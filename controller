import { Body, Controller, Get, Post } from '@nestjs/common';
import { MessageProducerService } from './message-producer.service';
import { MessageReceiverService } from './message-receiver.service';
import { RequestType } from './types/request.type';
// import { LambdaClient, InvokeCommand } from "@aws-sdk/client-lambda";
// import { SqsConsumer, SqsMessageHandler } from '@nestjs/sqs';

@Controller()
export class AppController {
  constructor(
    private readonly msgProducer: MessageProducerService,
    private readonly msgReceiver: MessageReceiverService
  ) { }

  @Post("/send")
  async receiver(@Body() body: RequestType): Promise<void> {

    // const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    // await delay(1000);

    const call = async () => await this.msgProducer.execute(body);

    // const count = new Array(5).fill(0).map((_, i) => i);
    // count.forEach(async (i) => {
    //   return await call();
    // });

    // await this.msgProducer.execute(body);
    return call();

  }

  @Get("/receive")
  async execute(): Promise<void> {
    await this.msgReceiver.execute();
  }

  // @SqsMessageHandler()
  // async handleMessage(message: Message) {
  //   console.log(`Received message: ${message.Body}`);
  //   // Process the message as needed
  // }
}
